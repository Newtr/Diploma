// <auto-generated />
using System;
using EvacProject.GENERAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EvacProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522125754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EvacProject.GENERAL.Entity.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AcademicDegreeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AcademicDegreeId");

                    b.ToTable("academic_degrees");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FacultyId");

                    b.ToTable("faculties");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.FormOfStudy", b =>
                {
                    b.Property<int>("FormOfStudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormOfStudyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FormOfStudyId");

                    b.ToTable("forms_of_study");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Admin", b =>
                {
                    b.HasBaseType("EvacProject.GENERAL.Entity.User");

                    b.Property<int>("AcademicDegreeId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PrivilegeExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PrivilegeGranted")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Student", b =>
                {
                    b.HasBaseType("EvacProject.GENERAL.Entity.User");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("FormOfStudyId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("TelegramChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TicketExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TicketIssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("FacultyId");

                    b.HasIndex("FormOfStudyId");

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.HasIndex("TelegramChatId")
                        .IsUnique();

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Admin", b =>
                {
                    b.HasOne("EvacProject.GENERAL.Entity.AcademicDegree", "AcademicDegree")
                        .WithMany("Admins")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvacProject.GENERAL.Entity.Department", "Department")
                        .WithMany("Admins")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvacProject.GENERAL.Entity.User", null)
                        .WithOne()
                        .HasForeignKey("EvacProject.GENERAL.Entity.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicDegree");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Student", b =>
                {
                    b.HasOne("EvacProject.GENERAL.Entity.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvacProject.GENERAL.Entity.FormOfStudy", "FormOfStudy")
                        .WithMany("Students")
                        .HasForeignKey("FormOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvacProject.GENERAL.Entity.User", null)
                        .WithOne()
                        .HasForeignKey("EvacProject.GENERAL.Entity.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("FormOfStudy");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.AcademicDegree", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Department", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.Faculty", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EvacProject.GENERAL.Entity.FormOfStudy", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
